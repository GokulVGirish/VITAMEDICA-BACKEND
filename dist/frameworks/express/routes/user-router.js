"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const user_controller_1 = __importDefault(require("../../../interface_adapters/controllers/user-controller"));
const userInteractor_1 = __importDefault(require("../../../use_cases/userInteractor"));
const userRepository_1 = __importDefault(require("../../../interface_adapters/repositories/userRepository"));
const mailer_1 = __importDefault(require("../../services/mailer"));
const jwt_generate_1 = __importDefault(require("../../services/jwt-generate"));
const jwt_verify_1 = __importDefault(require("../middlewares/jwt-verify"));
const user_1 = require("../middlewares/user");
const role_Authenticate_1 = __importDefault(require("../middlewares/role-Authenticate"));
const multer_1 = __importDefault(require("../../services/multer"));
const repository = new userRepository_1.default();
const mailer = new mailer_1.default();
const jwtservices = new jwt_generate_1.default(process.env.ACCESS_TOCKEN_SECRET, process.env.REFRESH_TOCKEN_SECRET);
const interactor = new userInteractor_1.default(repository, mailer, jwtservices);
const controller = new user_controller_1.default(interactor);
const userRouter = express_1.default.Router();
userRouter.post("/signup", controller.otpSignup.bind(controller));
userRouter.post("/signup/verify-otp", controller.verifyOtpSignup.bind(controller));
userRouter.get("/token/verify", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), controller.verifyToken.bind(controller));
userRouter.post("/login", controller.login.bind(controller));
userRouter.post("/google/signup", controller.googleSignup.bind(controller));
userRouter.post("/google/login", controller.googleLogin.bind(controller));
userRouter.post("/otp/resend", jwt_verify_1.default, controller.resendOtp.bind(controller));
userRouter.get("/profile", jwt_verify_1.default, user_1.getUser, controller.profile.bind(controller));
userRouter.put("/profile", jwt_verify_1.default, user_1.getUser, controller.profileUpdate.bind(controller));
userRouter.put("/profile/picture", jwt_verify_1.default, user_1.getUser, multer_1.default.single("image"), controller.ProfilePictureUpdate.bind(controller));
userRouter.post("/password/reset-request", controller.passwordResetLink.bind(controller));
userRouter.post("/password/reset/:token", controller.resetPassword.bind(controller));
userRouter.get("/doctor-list", jwt_verify_1.default, user_1.getUser, controller.getDoctorList.bind(controller));
userRouter.get("/doctors/:id/profile", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.getDoctorPage.bind(controller));
userRouter.get("/doctors/:doctorId/availability", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.getAvailableDate.bind(controller));
userRouter.get("/doctors/:doctorId/slots", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.getTimeSlots.bind(controller));
userRouter.post("/appointments/order", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.razorPayOrder.bind(controller));
userRouter.post("/appointments/order/validate", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.razorPayValidate.bind(controller));
userRouter.post("/appointments/lock-slot", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.lockSlot.bind(controller));
userRouter.get("/appointments", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.getAppointments.bind(controller));
userRouter.put("/appointments/:appointmentId/cancel");
userRouter.get("/wallet", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.getWalletInfo.bind(controller));
userRouter.put("/appointments/:appointmentId/cancel", jwt_verify_1.default, (0, role_Authenticate_1.default)("user"), user_1.getUser, controller.cancelAppointment.bind(controller));
exports.default = userRouter;
