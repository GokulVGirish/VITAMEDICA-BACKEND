"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const adminInteractor_1 = __importDefault(require("../../../use_cases/adminInteractor"));
const adminRepository_1 = __importDefault(require("../../../interface_adapters/repositories/adminRepository"));
const admin_controller_1 = __importDefault(require("../../../interface_adapters/controllers/admin-controller"));
const jwt_generate_1 = __importDefault(require("../../services/jwt-generate"));
const jwt_verify_1 = __importDefault(require("../../services/jwt-verify"));
const role_Authenticate_1 = __importDefault(require("../middlewares/role-Authenticate"));
const jwtservices = new jwt_generate_1.default(process.env.ACCESS_TOCKEN_SECRET, process.env.REFRESH_TOCKEN_SECRET);
const repository = new adminRepository_1.default();
const interactor = new adminInteractor_1.default(repository, jwtservices);
const controller = new admin_controller_1.default(interactor);
const adminRouter = express_1.default.Router();
adminRouter.post("/login", controller.login.bind(controller));
adminRouter.get("/verify-token", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.verifyToken.bind(controller));
adminRouter.get("/department", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.getDepartments.bind(controller));
adminRouter.post("/department", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.addDepartment.bind(controller));
adminRouter.delete("/department/:id", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.deleteDepartment.bind(controller));
adminRouter.get("/userManagement", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.getUsers.bind(controller));
adminRouter.put("/userBlockUnblock/:id/:status", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.blockUnblockUser.bind(controller));
adminRouter.get("/unverifiedDoctor", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.getUnverifiedDoctors.bind(controller));
adminRouter.get("/doctorDocument/:id", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.getDoctorDocs.bind(controller));
adminRouter.put("/verifyDoctor/:id", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.verifyDoctor.bind(controller));
adminRouter.get("/doctorManagement", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.getDoctors.bind(controller));
adminRouter.put("/doctorBlockUnblock/:id/:status", jwt_verify_1.default, (0, role_Authenticate_1.default)("admin"), controller.doctorBlockUnblock.bind(controller));
exports.default = adminRouter;
